# import os
# import time
# from typing import Any

# import requests
# import streamlit as st
# from dotenv import find_dotenv, load_dotenv
# from transformers import pipeline

# from utils.custom import css_code

# # Load environment variables
# load_dotenv(find_dotenv())
# HUGGINGFACE_API_TOKEN = os.getenv("HUGGINGFACE_API_TOKEN")
# GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")


# def progress_bar(amount_of_time: int) -> Any:
#     """
#     A very simple progress bar that increases over time,
#     then disappears when it reaches completion.
#     :param amount_of_time: time taken
#     :return: None
#     """
#     progress_text = "Please wait, Generative models hard at work"
#     my_bar = st.progress(0, text=progress_text)

#     for percent_complete in range(amount_of_time):
#         time.sleep(0.04)
#         my_bar.progress(percent_complete + 1, text=progress_text)
#     time.sleep(1)
#     my_bar.empty()


# def generate_text_from_image(url: str) -> str:
#     """
#     A function that uses the BLIP model to generate text from an image.
#     :param url: image location
#     :return: text: generated text from the image
#     """
#     image_to_text: Any = pipeline("image-to-text", model="Salesforce/blip-image-captioning-base")

#     generated_text: str = image_to_text(url)[0]["generated_text"]

#     print(f"IMAGE INPUT: {url}")
#     print(f"GENERATED TEXT OUTPUT: {generated_text}")
#     return generated_text


# def generate_story_from_text(scenario: str) -> str:
#     """
#     A function using Gemini API to generate a short story.
#     :param scenario: generated text from the image
#     :return: generated story from the text
#     """
#     API_URL: str = "https://api.gemini.com/v1/generate-text"  # Replace with Gemini API's actual URL
#     headers: dict[str, str] = {
#         "Authorization": f"Bearer {GEMINI_API_KEY}",
#         "Content-Type": "application/json",
#     }
#     payload: dict[str, Any] = {
#         "prompt": f"""
#         You are a talented storyteller who can create a story from a simple narrative.
#         Create a story using the following scenario; the story should be maximum 50 words long:
        
#         CONTEXT: {scenario}
#         STORY:
#         """,
#         "max_tokens": 100,
#         "temperature": 0.9,
#     }

#     response = requests.post(API_URL, headers=headers, json=payload)
#     response_data = response.json()

#     if response.status_code == 200 and "text" in response_data:
#         generated_story: str = response_data["text"]
#         print(f"TEXT INPUT: {scenario}")
#         print(f"GENERATED STORY OUTPUT: {generated_story}")
#         return generated_story
#     else:
#         raise Exception(f"Gemini API Error: {response_data.get('error', 'Unknown error')}")


# def generate_speech_from_text(message: str) -> Any:
#     """
#     A function using the ESPnet text-to-speech model from HuggingFace
#     :param message: short story generated by the GPT model
#     :return: generated audio from the short story
#     """
#     API_URL: str = "https://api-inference.huggingface.co/models/espnet/kan-bayashi_ljspeech_vits"
#     headers: dict[str, str] = {"Authorization": f"Bearer {HUGGINGFACE_API_TOKEN}"}
#     payloads: dict[str, str] = {
#         "inputs": message
#     }

#     response: Any = requests.post(API_URL, headers=headers, json=payloads)
#     if response.status_code == 200:
#         with open("generated_audio.flac", "wb") as file:
#             file.write(response.content)
#     else:
#         raise Exception("Failed to generate speech from text")


# def main() -> None:
#     """
#     Main function
#     :return: None
#     """
#     st.set_page_config(page_title="IMAGE TO STORY CONVERTER", page_icon="üñºÔ∏è")

#     st.markdown(css_code, unsafe_allow_html=True)

#     with st.sidebar:
#         #st.image("img/abc.jpg")
#         st.write("---")
#         st.write("Created by @Ayaan Ahmed")

#     st.header("Image-to-Story Converter")
#     uploaded_file: Any = st.file_uploader("Please choose a file to upload", type="jpg")

#     if uploaded_file is not None:
#         print(uploaded_file)
#         bytes_data: Any = uploaded_file.getvalue()
#         with open(uploaded_file.name, "wb") as file:
#             file.write(bytes_data)
#         st.image(uploaded_file, caption="Uploaded Image", use_column_width=True)

#         progress_bar(100)

#         # Generate text from image
#         scenario: str = generate_text_from_image(uploaded_file.name)

#         # Generate story from the text using Gemini API
#         story: str = generate_story_from_text(scenario)

#         # Generate speech from the generated story
#         generate_speech_from_text(story)

#         with st.expander("Generated Image scenario"):
#             st.write(scenario)
#         with st.expander("Generated short story"):
#             st.write(story)

#         # Play the generated audio file
#         st.audio("generated_audio.flac")


# if __name__ == "__main__":
#     main()
pass